# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AffectedRowsOutput {
  count: Int!
}

type AggregateProfile {
  _avg: ProfileAvgAggregate
  _count: ProfileCountAggregate
  _max: ProfileMaxAggregate
  _min: ProfileMinAggregate
  _sum: ProfileSumAggregate
}

type AggregateUser {
  _avg: UserAvgAggregate
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  _sum: UserSumAggregate
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input EnumGENDERFieldUpdateOperationsInput {
  set: GENDER
}

input EnumGENDERFilter {
  equals: GENDER
  in: [GENDER!]
  not: NestedEnumGENDERFilter
  notIn: [GENDER!]
}

input EnumGENDERWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumGENDERFilter
  _min: NestedEnumGENDERFilter
  equals: GENDER
  in: [GENDER!]
  not: NestedEnumGENDERWithAggregatesFilter
  notIn: [GENDER!]
}

enum GENDER {
  female
  male
  other
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JsonNullableFilter {
  equals: JSON
  not: JSON
}

input JsonNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedJsonNullableFilter
  _min: NestedJsonNullableFilter
  equals: JSON
  not: JSON
}

type Mutation {
  createManyProfile(data: [ProfileCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyUser(data: [UserCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createProfile(data: ProfileCreateInput!): Profile!
  createUser(data: UserCreateInput!): User!
  deleteManyProfile(where: ProfileWhereInput): AffectedRowsOutput!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deleteProfile(where: ProfileWhereUniqueInput!): Profile
  deleteUser(where: UserWhereUniqueInput!): User
  updateManyProfile(data: ProfileUpdateManyMutationInput!, where: ProfileWhereInput): AffectedRowsOutput!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updateProfile(data: ProfileUpdateInput!, where: ProfileWhereUniqueInput!): Profile
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertProfile(create: ProfileCreateInput!, update: ProfileUpdateInput!, where: ProfileWhereUniqueInput!): Profile!
  upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedEnumGENDERFilter {
  equals: GENDER
  in: [GENDER!]
  not: NestedEnumGENDERFilter
  notIn: [GENDER!]
}

input NestedEnumGENDERWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumGENDERFilter
  _min: NestedEnumGENDERFilter
  equals: GENDER
  in: [GENDER!]
  not: NestedEnumGENDERWithAggregatesFilter
  notIn: [GENDER!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

input NestedJsonNullableFilter {
  equals: JSON
  not: JSON
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Profile {
  birthday: DateTime!
  createdAt: DateTime!
  firstname: String!
  fullname: String!
  gender: GENDER!
  id: String!
  lastname: String!
  metadata: JSON
  updatedAt: DateTime!
  user: User!
  userId: String!
  version: Int!
}

type ProfileAvgAggregate {
  version: Float
}

input ProfileAvgOrderByAggregateInput {
  version: SortOrder
}

type ProfileCountAggregate {
  _all: Int!
  birthday: Int!
  createdAt: Int!
  firstname: Int!
  fullname: Int!
  gender: Int!
  id: Int!
  lastname: Int!
  metadata: Int!
  updatedAt: Int!
  userId: Int!
  version: Int!
}

input ProfileCountOrderByAggregateInput {
  birthday: SortOrder
  createdAt: SortOrder
  firstname: SortOrder
  fullname: SortOrder
  gender: SortOrder
  id: SortOrder
  lastname: SortOrder
  metadata: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
  version: SortOrder
}

input ProfileCreateInput {
  birthday: DateTime!
  createdAt: DateTime
  firstname: String!
  fullname: String!
  gender: GENDER!
  id: String
  lastname: String!
  metadata: JSON
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutProfileInput!
  version: Int
}

input ProfileCreateManyInput {
  birthday: DateTime!
  createdAt: DateTime
  firstname: String!
  fullname: String!
  gender: GENDER!
  id: String
  lastname: String!
  metadata: JSON
  updatedAt: DateTime
  userId: String!
  version: Int
}

input ProfileCreateNestedOneWithoutUserInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutUserInput
  create: ProfileCreateWithoutUserInput
}

input ProfileCreateOrConnectWithoutUserInput {
  create: ProfileCreateWithoutUserInput!
  where: ProfileWhereUniqueInput!
}

input ProfileCreateWithoutUserInput {
  birthday: DateTime!
  createdAt: DateTime
  firstname: String!
  fullname: String!
  gender: GENDER!
  id: String
  lastname: String!
  metadata: JSON
  updatedAt: DateTime
  version: Int
}

type ProfileGroupBy {
  _avg: ProfileAvgAggregate
  _count: ProfileCountAggregate
  _max: ProfileMaxAggregate
  _min: ProfileMinAggregate
  _sum: ProfileSumAggregate
  birthday: DateTime!
  createdAt: DateTime!
  firstname: String!
  fullname: String!
  gender: GENDER!
  id: String!
  lastname: String!
  metadata: JSON
  updatedAt: DateTime!
  userId: String!
  version: Int!
}

type ProfileMaxAggregate {
  birthday: DateTime
  createdAt: DateTime
  firstname: String
  fullname: String
  gender: GENDER
  id: String
  lastname: String
  updatedAt: DateTime
  userId: String
  version: Int
}

input ProfileMaxOrderByAggregateInput {
  birthday: SortOrder
  createdAt: SortOrder
  firstname: SortOrder
  fullname: SortOrder
  gender: SortOrder
  id: SortOrder
  lastname: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
  version: SortOrder
}

type ProfileMinAggregate {
  birthday: DateTime
  createdAt: DateTime
  firstname: String
  fullname: String
  gender: GENDER
  id: String
  lastname: String
  updatedAt: DateTime
  userId: String
  version: Int
}

input ProfileMinOrderByAggregateInput {
  birthday: SortOrder
  createdAt: SortOrder
  firstname: SortOrder
  fullname: SortOrder
  gender: SortOrder
  id: SortOrder
  lastname: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
  version: SortOrder
}

input ProfileOrderByWithAggregationInput {
  _avg: ProfileAvgOrderByAggregateInput
  _count: ProfileCountOrderByAggregateInput
  _max: ProfileMaxOrderByAggregateInput
  _min: ProfileMinOrderByAggregateInput
  _sum: ProfileSumOrderByAggregateInput
  birthday: SortOrder
  createdAt: SortOrder
  firstname: SortOrder
  fullname: SortOrder
  gender: SortOrder
  id: SortOrder
  lastname: SortOrder
  metadata: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
  version: SortOrder
}

input ProfileOrderByWithRelationInput {
  birthday: SortOrder
  createdAt: SortOrder
  firstname: SortOrder
  fullname: SortOrder
  gender: SortOrder
  id: SortOrder
  lastname: SortOrder
  metadata: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
  version: SortOrder
}

input ProfileRelationFilter {
  is: ProfileWhereInput
  isNot: ProfileWhereInput
}

enum ProfileScalarFieldEnum {
  birthday
  createdAt
  firstname
  fullname
  gender
  id
  lastname
  metadata
  updatedAt
  userId
  version
}

input ProfileScalarWhereWithAggregatesInput {
  AND: [ProfileScalarWhereWithAggregatesInput!]
  NOT: [ProfileScalarWhereWithAggregatesInput!]
  OR: [ProfileScalarWhereWithAggregatesInput!]
  birthday: DateTimeWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  firstname: StringWithAggregatesFilter
  fullname: StringWithAggregatesFilter
  gender: EnumGENDERWithAggregatesFilter
  id: StringWithAggregatesFilter
  lastname: StringWithAggregatesFilter
  metadata: JsonNullableWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: StringWithAggregatesFilter
  version: IntWithAggregatesFilter
}

type ProfileSumAggregate {
  version: Int
}

input ProfileSumOrderByAggregateInput {
  version: SortOrder
}

input ProfileUpdateInput {
  birthday: DateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  firstname: StringFieldUpdateOperationsInput
  fullname: StringFieldUpdateOperationsInput
  gender: EnumGENDERFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastname: StringFieldUpdateOperationsInput
  metadata: JSON
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutProfileInput
  version: IntFieldUpdateOperationsInput
}

input ProfileUpdateManyMutationInput {
  birthday: DateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  firstname: StringFieldUpdateOperationsInput
  fullname: StringFieldUpdateOperationsInput
  gender: EnumGENDERFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastname: StringFieldUpdateOperationsInput
  metadata: JSON
  updatedAt: DateTimeFieldUpdateOperationsInput
  version: IntFieldUpdateOperationsInput
}

input ProfileUpdateOneWithoutUserInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutUserInput
  create: ProfileCreateWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  update: ProfileUpdateWithoutUserInput
  upsert: ProfileUpsertWithoutUserInput
}

input ProfileUpdateWithoutUserInput {
  birthday: DateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  firstname: StringFieldUpdateOperationsInput
  fullname: StringFieldUpdateOperationsInput
  gender: EnumGENDERFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastname: StringFieldUpdateOperationsInput
  metadata: JSON
  updatedAt: DateTimeFieldUpdateOperationsInput
  version: IntFieldUpdateOperationsInput
}

input ProfileUpsertWithoutUserInput {
  create: ProfileCreateWithoutUserInput!
  update: ProfileUpdateWithoutUserInput!
}

input ProfileWhereInput {
  AND: [ProfileWhereInput!]
  NOT: [ProfileWhereInput!]
  OR: [ProfileWhereInput!]
  birthday: DateTimeFilter
  createdAt: DateTimeFilter
  firstname: StringFilter
  fullname: StringFilter
  gender: EnumGENDERFilter
  id: StringFilter
  lastname: StringFilter
  metadata: JsonNullableFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
  version: IntFilter
}

input ProfileWhereUniqueInput {
  id: String
  userId: String
}

type Query {
  aggregateProfile(cursor: ProfileWhereUniqueInput, orderBy: [ProfileOrderByWithRelationInput!], skip: Int, take: Int, where: ProfileWhereInput): AggregateProfile!
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  bestUser: User
  findFirstProfile(cursor: ProfileWhereUniqueInput, distinct: [ProfileScalarFieldEnum!], orderBy: [ProfileOrderByWithRelationInput!], skip: Int, take: Int, where: ProfileWhereInput): Profile
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  groupByProfile(by: [ProfileScalarFieldEnum!]!, having: ProfileScalarWhereWithAggregatesInput, orderBy: [ProfileOrderByWithAggregationInput!], skip: Int, take: Int, where: ProfileWhereInput): [ProfileGroupBy!]!
  groupByUser(by: [UserScalarFieldEnum!]!, having: UserScalarWhereWithAggregatesInput, orderBy: [UserOrderByWithAggregationInput!], skip: Int, take: Int, where: UserWhereInput): [UserGroupBy!]!
  profile(where: ProfileWhereUniqueInput!): Profile
  profiles(cursor: ProfileWhereUniqueInput, distinct: [ProfileScalarFieldEnum!], orderBy: [ProfileOrderByWithRelationInput!], skip: Int, take: Int, where: ProfileWhereInput): [Profile!]!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type User {
  createdAt: DateTime!
  email: String!
  id: String!
  metadata: JSON
  password: String!
  profile: Profile
  updatedAt: DateTime!
  username: String
  version: Int!
}

type UserAvgAggregate {
  version: Float
}

input UserAvgOrderByAggregateInput {
  version: SortOrder
}

type UserCountAggregate {
  _all: Int!
  createdAt: Int!
  email: Int!
  id: Int!
  metadata: Int!
  password: Int!
  updatedAt: Int!
  username: Int!
  version: Int!
}

input UserCountOrderByAggregateInput {
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  metadata: SortOrder
  password: SortOrder
  updatedAt: SortOrder
  username: SortOrder
  version: SortOrder
}

input UserCreateInput {
  createdAt: DateTime
  email: String!
  id: String
  metadata: JSON
  password: String!
  profile: ProfileCreateNestedOneWithoutUserInput
  updatedAt: DateTime
  username: String
  version: Int
}

input UserCreateManyInput {
  createdAt: DateTime
  email: String!
  id: String
  metadata: JSON
  password: String!
  updatedAt: DateTime
  username: String
  version: Int
}

input UserCreateNestedOneWithoutProfileInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutProfileInput
  create: UserCreateWithoutProfileInput
}

input UserCreateOrConnectWithoutProfileInput {
  create: UserCreateWithoutProfileInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutProfileInput {
  createdAt: DateTime
  email: String!
  id: String
  metadata: JSON
  password: String!
  updatedAt: DateTime
  username: String
  version: Int
}

type UserGroupBy {
  _avg: UserAvgAggregate
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  _sum: UserSumAggregate
  createdAt: DateTime!
  email: String!
  id: String!
  metadata: JSON
  password: String!
  updatedAt: DateTime!
  username: String
  version: Int!
}

type UserMaxAggregate {
  createdAt: DateTime
  email: String
  id: String
  password: String
  updatedAt: DateTime
  username: String
  version: Int
}

input UserMaxOrderByAggregateInput {
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  password: SortOrder
  updatedAt: SortOrder
  username: SortOrder
  version: SortOrder
}

type UserMinAggregate {
  createdAt: DateTime
  email: String
  id: String
  password: String
  updatedAt: DateTime
  username: String
  version: Int
}

input UserMinOrderByAggregateInput {
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  password: SortOrder
  updatedAt: SortOrder
  username: SortOrder
  version: SortOrder
}

input UserOrderByWithAggregationInput {
  _avg: UserAvgOrderByAggregateInput
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  _sum: UserSumOrderByAggregateInput
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  metadata: SortOrder
  password: SortOrder
  updatedAt: SortOrder
  username: SortOrder
  version: SortOrder
}

input UserOrderByWithRelationInput {
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  metadata: SortOrder
  password: SortOrder
  profile: ProfileOrderByWithRelationInput
  updatedAt: SortOrder
  username: SortOrder
  version: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  createdAt
  email
  id
  metadata
  password
  updatedAt
  username
  version
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  email: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  metadata: JsonNullableWithAggregatesFilter
  password: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  username: StringNullableWithAggregatesFilter
  version: IntWithAggregatesFilter
}

type UserSumAggregate {
  version: Int
}

input UserSumOrderByAggregateInput {
  version: SortOrder
}

input UserUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  metadata: JSON
  password: StringFieldUpdateOperationsInput
  profile: ProfileUpdateOneWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
  version: IntFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  metadata: JSON
  password: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
  version: IntFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutProfileInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutProfileInput
  create: UserCreateWithoutProfileInput
  update: UserUpdateWithoutProfileInput
  upsert: UserUpsertWithoutProfileInput
}

input UserUpdateWithoutProfileInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  metadata: JSON
  password: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
  version: IntFieldUpdateOperationsInput
}

input UserUpsertWithoutProfileInput {
  create: UserCreateWithoutProfileInput!
  update: UserUpdateWithoutProfileInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  createdAt: DateTimeFilter
  email: StringFilter
  id: StringFilter
  metadata: JsonNullableFilter
  password: StringFilter
  profile: ProfileRelationFilter
  updatedAt: DateTimeFilter
  username: StringNullableFilter
  version: IntFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
  username: String
}
